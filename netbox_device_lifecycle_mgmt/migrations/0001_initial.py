# Generated by Django 4.1.8 on 2023-04-23 16:18

import django.db.models.deletion
import taggit.managers
import utilities.json
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('extras', '0092_delete_jobresult'),
        ('dcim', '0171_cabletermination_change_logging'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='SoftwareNotice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                (
                    'custom_field_data',
                    models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder),
                ),
                ('description', models.CharField(blank=True, max_length=200)),
                ('comments', models.TextField(blank=True)),
                ('version', models.CharField(max_length=50)),
                ('release_date', models.DateField(blank=True, null=True)),
                ('end_of_support_date', models.DateField(blank=True, null=True)),
                ('documentation_url', models.URLField(blank=True, null=True)),
                ('long_term_support', models.BooleanField(default=False)),
                ('pre_release', models.BooleanField(default=False)),
                ('_name', models.CharField(max_length=255)),
                (
                    'platform',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='+',
                        to='dcim.platform',
                    ),
                ),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'ordering': ['platform', 'version', 'end_of_support_date', 'release_date'],
            },
        ),
        migrations.CreateModel(
            name='SoftwareImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                (
                    'custom_field_data',
                    models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder),
                ),
                ('description', models.CharField(blank=True, max_length=200)),
                ('comments', models.TextField(blank=True)),
                ('file_name', models.CharField(max_length=255)),
                ('download_url', models.URLField(blank=True)),
                ('sha256_checksum', models.CharField(blank=True, max_length=64)),
                ('default_image', models.BooleanField(default=False)),
                (
                    'software',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='images',
                        to='netbox_device_lifecycle_mgmt.softwarenotice',
                    ),
                ),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'ordering': ['software', 'default_image', 'file_name'],
            },
        ),
        migrations.CreateModel(
            name='HardwareNotice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                (
                    'custom_field_data',
                    models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder),
                ),
                ('description', models.CharField(blank=True, max_length=200)),
                ('comments', models.TextField(blank=True)),
                ('object_id', models.PositiveBigIntegerField()),
                ('release_date', models.DateField(blank=True, null=True)),
                ('end_of_sale_date', models.DateField(blank=True, null=True)),
                ('end_of_support_date', models.DateField(blank=True, null=True)),
                ('end_of_sw_releases_date', models.DateField(blank=True, null=True)),
                ('end_of_security_updates_date', models.DateField(blank=True, null=True)),
                ('documentation_url', models.URLField(blank=True)),
                (
                    'object_type',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='+',
                        to='contenttypes.contenttype',
                    ),
                ),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'Hardware Notice',
                'verbose_name_plural': 'Hardware Notices',
                'ordering': ['end_of_support_date', 'end_of_sale_date'],
            },
        ),
        migrations.AddConstraint(
            model_name='softwarenotice',
            constraint=models.UniqueConstraint(
                fields=('platform', 'version'),
                name='netbox_device_lifecycle_mgmt_softwarenotice_unique_software_notice',
                violation_error_message='A software notice already exists for this platform and version.',
            ),
        ),
        migrations.AddConstraint(
            model_name='softwareimage',
            constraint=models.UniqueConstraint(
                fields=('software', 'file_name'),
                name='netbox_device_lifecycle_mgmt_softwareimage_unique_software_image',
                violation_error_message='A software image already exists for this software and file name.',
            ),
        ),
        migrations.AddConstraint(
            model_name='hardwarenotice',
            constraint=models.UniqueConstraint(
                fields=('object_type', 'object_id'),
                name='netbox_device_lifecycle_mgmt_hardwarenotice_unique_object',
                violation_error_message='A hardware notice already exists for this object.',
            ),
        ),
        migrations.AddConstraint(
            model_name='hardwarenotice',
            constraint=models.CheckConstraint(
                check=models.Q(
                    ('end_of_sale_date__isnull', False),
                    ('end_of_support_date__isnull', False),
                    _connector='OR',
                ),
                name='netbox_device_lifecycle_mgmt_hardwarenotice_end_of_sale_or_support',
                violation_error_message='Either end of sale or end of support must be set.',
            ),
        ),
    ]
